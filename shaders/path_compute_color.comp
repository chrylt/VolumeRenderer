#version 450
#extension GL_GOOGLE_include_directive : enable

#include "common_includes.h"

layout(local_size_x = 16, local_size_y = 16) in;
#define INVOCATIONS_PER_FRAME 1

vec3 computeLightContribution(vec3 sampleWorldPos) {
    vec3 totalLight = vec3(0.0);
    for (int i = 0; i < lightCount; i++) {

        vec3 rayLocal = lights[i].positionTo - lights[i].positionFrom;
        vec3 rayDir = normalize(rayLocal);
        uint amountOfSteps = uint(length(rayLocal) / lightRayStepSize);
        float pointIntensity = lights[i].intensity / amountOfSteps;

        for(int s = 0; s < amountOfSteps; s++){    // march along ray light

            vec3 sphereOrigin = lights[i].positionFrom + s * lightRayStepSize * rayDir;

            totalLight += getSphereLightContribution(sampleWorldPos, sphereOrigin, pointIntensity);
        }
    }
    return totalLight;
}

void main() {
    initNanoVolume();

    uvec3 gid = gl_GlobalInvocationID;
    uvec3 seed = uvec3(gid.x, gid.y, gid.z) * frameCount;

    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 imageSize = imageSize(img);

    float u = float(pixelCoords.x) / float(imageSize.x);
    float v = float(pixelCoords.y) / float(imageSize.y);

    uint width = framebufferDim.x;
    uint height = framebufferDim.y;
    float aspectRatio = float(width) / float(height);
    float scale = tan(fov * 0.5 * M_PI / 180.0);

    float x = (2 * (pixelCoords.x + 0.5) / width - 1) * aspectRatio * scale;
    float y = (1 - 2 * (pixelCoords.y + 0.5) / height) * scale;

    Ray ray;
    ray.origin = cameraPos;
    ray.direction = normalize(vec3(x, y, 1.0));
    ray.minDistance = 0.0;
    ray.maxDistance = rayMaxDistance;

    // Transform ray into local index space
    pnanovdb_vec3_t oIndex = pnanovdb_grid_world_to_indexf(discarded, gridHandle, pnanovdb_vec3_t(ray.origin.x, ray.origin.y, ray.origin.z));
    pnanovdb_vec3_t dIndex = pnanovdb_grid_world_to_index_dirf(discarded, gridHandle, pnanovdb_vec3_t(ray.direction.x, ray.direction.y, ray.direction.z));
    
    vec3 rayOriginLocal = vec3(oIndex.x, oIndex.y, oIndex.z);
    vec3 rayDirLocal = normalize(vec3(dIndex.x, dIndex.y, dIndex.z));

    pnanovdb_tree_handle_t tree = pnanovdb_grid_get_tree(discarded, gridHandle);
    pnanovdb_root_handle_t root = pnanovdb_tree_get_root(discarded, tree);

    pnanovdb_coord_t bboxMinI = pnanovdb_root_get_bbox_min(discarded, root);
    pnanovdb_coord_t bboxMaxI = pnanovdb_root_get_bbox_max(discarded, root);

    vec3 boxMin = vec3(bboxMinI.x, bboxMinI.y, bboxMinI.z);
    vec3 boxMax = vec3(bboxMaxI.x + 1, bboxMaxI.y + 1, bboxMaxI.z + 1);

    float tmin = ray.minDistance;
    float tmax = ray.maxDistance;
    bool hitVolume = intersectAABB(rayOriginLocal, rayDirLocal, boxMin, boxMax, tmin, tmax);

    float stepSize = rayMarchingStepSize;
    float T = 1.0; // transmittance starts at 100%
    float currentT = tmin;
     vec3 currentPosLocal = rayOriginLocal + rayDirLocal * tmin;
    float photonIntensity = photonInitialIntensity;

    vec3 finalColor = vec3(0.0);
    while (hitVolume && currentT < tmax && T > 0.001 && photonIntensity > 0.01) {
        
        ivec3 ijk = ivec3(floor(currentPosLocal.x), floor(currentPosLocal.y), floor(currentPosLocal.z));
        if (ijk.x >= bboxMinI.x && ijk.y >= bboxMinI.y && ijk.z >= bboxMinI.z &&
            ijk.x <= bboxMaxI.x && ijk.y <= bboxMaxI.y && ijk.z <= bboxMaxI.z) {
            pnanovdb_address_t addr = pnanovdb_readaccessor_get_value_address(gridType, discarded, accessor, ijk);
            float val = pnanovdb_read_float(discarded, addr);

            if (val > 0.0) {
               
                // Attenuate photon
                float attenuation = exp(-val * absorptionCoefficient * stepSize);
                photonIntensity *= attenuation;
                T *= attenuation;

                // Decide if we scatter
                float bounceRoll = randf_inc(seed);
                if (bounceRoll < scatteringProbability) {

                    // Set new local directions
                    rayDirLocal = randomDir(randf_inc(seed), randf_inc(seed));
                    rayOriginLocal = currentPosLocal;
                    currentT = 0;
                }

                // Add in-scattering
                vec3 currPosGlobal =  pnanovdb_grid_index_to_worldf(discarded, gridHandle, pnanovdb_vec3_t(currentPosLocal.x, currentPosLocal.y, currentPosLocal.z));
                vec3 lightIncoming = getPointLightContribution(currPosGlobal, lightSourceWorldPos, photonInitialIntensity * 10);
                vec3 dC = T * val * stepSize * lightIncoming;
                finalColor += dC;
            }

        }

        currentT += stepSize;
        currentPosLocal = rayOriginLocal + rayDirLocal * currentT;
    }
    
    vec3 frameColor = clamp(finalColor, 0.0, 1.0);

    vec3 previousColor = imageLoad(img, pixelCoords).rgb;

    uint contributionCount = frameCount;

    vec4 newColor = vec4((previousColor * (contributionCount - 1) + frameColor) / contributionCount, 1);

    imageStore(img, pixelCoords, newColor);
}