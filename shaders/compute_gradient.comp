#version 450
#extension GL_GOOGLE_include_directive : enable

#define M_PI       3.14159265358979323846   // pi

layout(binding = 2) readonly buffer NanoVDBBuffer {
    uint pnanovdb_buf_data[]; // uint array == volumeBuffer
};

#include "PNanoVDB_GLSL.h"

pnanovdb_buf_t discarded = {0};   
// Explaination: It appears as if they wanted to keep the functions parameter 
// list the same between HLSL and GLSL. But since reinterpreting is not possible 
// in GLSL, sometimes you need to give a pnanovdb_buf_t as an argument, which is 
// not actually used in the GLSL version of the methods. Instead the GLSL version 
// directly accesses the variable named pnanovdb_buf_data as an array.

layout (local_size_x = 16, local_size_y = 16) in;

layout (binding = 0, rgba8) uniform writeonly image2D img;

pnanovdb_uint32_t gridType;
pnanovdb_readaccessor_t accessor;
pnanovdb_grid_handle_t gridHandle;

struct Ray{
    vec3 origin;
    vec3 direction;
    float minDistance;
    float maxDistance;
};

void initNanoVolume(){  // Source: Masterarbeit
    pnanovdb_address_t address;
    address.byte_offset = 0;
    gridHandle.address = address;

    //create handles for accessor and gridType
    pnanovdb_tree_handle_t treeHandle = pnanovdb_grid_get_tree(discarded, gridHandle);
    pnanovdb_root_handle_t rootHandle = pnanovdb_tree_get_root(discarded, treeHandle);
    
    // create objects of volume
    pnanovdb_readaccessor_init(accessor, rootHandle);
    // could be set as a constant for better compiler optimization
    // if the type is fix
    gridType = pnanovdb_grid_get_grid_type(discarded, gridHandle);
}

bool intersectAABB(vec3 origin, vec3 dir, vec3 boxMin, vec3 boxMax, inout float tmin, inout float tmax) {
    for (int i = 0; i < 3; i++) {
        float invD = 1.0 / dir[i];
        float t0 = (boxMin[i] - origin[i]) * invD;
        float t1 = (boxMax[i] - origin[i]) * invD;
        if (invD < 0.0) {
            float temp = t0; t0 = t1; t1 = temp;
        }
        tmin = max(tmin, t0);
        tmax = min(tmax, t1);
        if (tmax < tmin) return false;
    }
    return true;
}

void main() {
    initNanoVolume();

    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 imageSize = imageSize(img);

    float u = float(pixelCoords.x) / float(imageSize.x);
    float v = float(pixelCoords.y) / float(imageSize.y);

    // Set up the camera parameters
    int width = 256;
    int height = 256;
    vec3 cameraPos = vec3(0.0, 250.0, -800.0);
    float fov = 45.0; // Field of view in degrees

    // Precompute camera parameters
    float aspectRatio = float(width) / height;
    float scale = tan(fov * 0.5 * M_PI / 180.0);

    // Normalize pixel coordinates to [-1, 1]
    float x = (2 * (pixelCoords.x + 0.5) / width - 1) * aspectRatio * scale;
    float y = (1 - 2 * (pixelCoords.y + 0.5) / height) * scale;

    Ray ray;
    ray.origin = cameraPos;
    ray.direction = normalize(vec3(x, y, 1.0));
    ray.minDistance = 0;
    ray.maxDistance = 1200.0;

    // Convert ray to volume’s local (index) space
    // Uses the NanoVDB grid transform to do correct scaling
    pnanovdb_vec3_t oIndex = pnanovdb_grid_world_to_indexf(discarded, gridHandle, pnanovdb_vec3_t(ray.origin.x, ray.origin.y, ray.origin.z));
    pnanovdb_vec3_t dIndex = pnanovdb_grid_world_to_index_dirf(discarded, gridHandle, pnanovdb_vec3_t(ray.direction.x, ray.direction.y, ray.direction.z));
    
    vec3 rayOriginLocal = vec3(oIndex.x, oIndex.y, oIndex.z);
    vec3 rayDirLocal = vec3(dIndex.x, dIndex.y, dIndex.z);

    // Get bounding box in voxel coordinates (already local)
    pnanovdb_tree_handle_t tree = pnanovdb_grid_get_tree(discarded, gridHandle);
    pnanovdb_root_handle_t root = pnanovdb_tree_get_root(discarded, tree);

    pnanovdb_coord_t bboxMinI = pnanovdb_root_get_bbox_min(discarded, root);
    pnanovdb_coord_t bboxMaxI = pnanovdb_root_get_bbox_max(discarded, root);

    vec3 boxMin = vec3(bboxMinI.x, bboxMinI.y, bboxMinI.z);
    vec3 boxMax = vec3(bboxMaxI.x + 1, bboxMaxI.y + 1, bboxMaxI.z + 1); // +1 because bbox is min inclusive, max exclusive

    float tmin = ray.minDistance;
    float tmax = ray.maxDistance;

    bool hitVolume = intersectAABB(rayOriginLocal, rayDirLocal, boxMin, boxMax, tmin, tmax);

    bool hit = false;
    if (hitVolume && tmax > 0.0) {
        hit = true;
        tmin = max(tmin, 0.0);
        float stepSize = 1.0;
        float t = tmin;

        while (t < tmax && !hit) {
            vec3 pLocal = rayOriginLocal + rayDirLocal * t;

            ivec3 ijk = ivec3(floor(pLocal.x), floor(pLocal.y), floor(pLocal.z));

            if (ijk.x >= bboxMinI.x && ijk.y >= bboxMinI.y && ijk.z >= bboxMinI.z &&
                ijk.x <= bboxMaxI.x && ijk.y <= bboxMaxI.y && ijk.z <= bboxMaxI.z) {
                
                pnanovdb_address_t addr = pnanovdb_readaccessor_get_value_address(gridType, discarded, accessor, ijk);
                float val = pnanovdb_read_float(discarded, addr);

                if (val > 0.0) {
                    hit = true;
                }
            }
            t += stepSize;
        }
    }

    vec4 color = vec4(u, v, 0.5, 1.0);

    if (hit) {
        color = vec4(0.0, 1.0, 0.0, 1.0);
    }
    else {
        color = vec4(1.0, 0.0, 0.0, 1.0);
    }

    imageStore(img, pixelCoords, color);
}
